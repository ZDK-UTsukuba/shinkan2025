---
import type { InferEntrySchema } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { getCollection } from "astro:content";

const startTime = 9;
const endTime = 18;
const rowsCount = (endTime - startTime) * 6;

const timetableData = await getCollection("timetable");

const stage = timetableData.reduce((acc: { [key: string]: InferEntrySchema<"timetable"> }, item) => {
  acc[item.id] = item.data;
  return acc;
}, {});

console.log(stage["ishihiro"][0].startsAt);
---

<Layout pageName="タイムテーブル">
  <div class="container">
    <div class="timetable">
      <div class="contents">
        {
          Array.from({ length: endTime - startTime + 1 }, (_, i) => (
            <div class="hour-label" style={{ gridArea: `${i * 6 + 2}/1` }}>
              <span class="hour">{startTime + i}</span>
              <span class="minutes">:00</span>
            </div>
          ))
        }
      </div>
      <div class="contents">
        {
          Array.from({ length: rowsCount + 1 }, (_, i) =>
            i % 6 == 0 ? (
              <div class="hour-line" style={{ gridArea: `${i + 2}/2/${i + 2}/4` }} />
            ) : (
              <div class="minute-line" style={{ gridArea: `${i + 2}/2/${i + 2}/4` }} />
            )
          )
        }
      </div>
      <div class="contents">
        <div class="stage-name" style={{ gridArea: "1/2" }}>
          <span>石の広場</span><span>ステージ</span>
        </div>
        {
          stage["ishihiro"].map((program) => {
            const [sh, sm] = program.startsAt.split(":").map(Number);
            const [eh, em] = program.endsAt.split(":").map(Number);
            const startsAt = (sh - startTime) * 6 + Math.round(sm / 10);
            const endsAt = (eh - startTime) * 6 + Math.round(em / 10);
            return (
              <div class="program" style={{ gridArea: `${2 + startsAt}/2/${2 + endsAt}/2` }}>
                {program.title}
              </div>
            );
          })
        }
      </div>
      <div class="contents">
        <div class="stage-name" style={{ gridArea: "1/3" }}>
          <span>1G棟前</span><span>ステージ</span>
        </div>
        {
          stage["1a"].map((program) => {
            const [sh, sm] = program.startsAt.split(":").map(Number);
            const [eh, em] = program.endsAt.split(":").map(Number);
            const startsAt = (sh - startTime) * 6 + Math.round(sm / 10);
            const endsAt = (eh - startTime) * 6 + Math.round(em / 10);
            return (
              <div class="program" style={{ gridArea: `${2 + startsAt}/3/${2 + endsAt}/3` }}>
                {program.title}
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
</Layout>

<style define:vars={{ rowsCount: rowsCount }}>
  .timetable {
    display: grid;
    grid-template-rows: auto repeat(var(--rowsCount), 20px);
    grid-template-columns: auto 1fr 1fr;
    justify-items: center;
    gap: 2px 1rem;
    width: 100%;
    position: relative;
  }
  .contents {
    display: contents;
  }
  .hour-label {
    color: var(--accent);
    font-size: 1rem;
    height: 1rem;
    transform: translateY(-0.7rem);
  }
  .minutes {
    font-size: 0.8em;
  }
  .hour-line {
    background: var(--accent);
    width: 100%;
    height: 2px;
    opacity: 0.5;
  }
  .minute-line {
    background: var(--accent);
    width: calc(100% - 15px);
    height: 1px;
    opacity: 0.25;
  }
  .stage-name {
    font-size: 1.25rem;
    padding-block: 1rem;
  }
  .program {
    color: #fff;
    width: 90%;
    border: 1px solid var(--accent);
    background: var(--accent-bright);
    padding: 5px;
    border-radius: 5px;
    z-index: 10;
    transition: background 0.3s ease;
  }
  .program:hover {
    background: var(--accent);
  }
</style>
